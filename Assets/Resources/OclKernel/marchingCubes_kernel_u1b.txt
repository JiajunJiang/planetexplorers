//#pragma OPENCL EXTENSION cl_amd_printf : enable

// The number of threads to use for triangle generation (limited by shared memory size)
#define NTHREADS 32

// volume data
__constant sampler_t volumeSampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;

__constant int triTable[256][16] =
{{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
{3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
{4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
{9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
{10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
{5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
{8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
{2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
{11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
{5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
{11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
{11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
{9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
{6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
{6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
{8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
{7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
{3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
{9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
{8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
{0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
{6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
{10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
{10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
{0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
{3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
{9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
{8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
{3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
{6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
{10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
{10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
{7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
{1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
{11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
{8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
{0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
{7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
{7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
{10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
{0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
{7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
{9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
{6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
{4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
{10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
{8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
{1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
{10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
{10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
{9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
{7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
{7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
{3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
{6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
{9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
{1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
{4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
{7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
{6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
{0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
{6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
{0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
{11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
{6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
{5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
{9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
{1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
{10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
{0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
{5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
{11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
{9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
{7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
{2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
{9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
{1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
{10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
{2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
{0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
{0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
{9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
{5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
{5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
{9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
{1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
{3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
{4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
{9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
{11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
{2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
{9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
{3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
{1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
{4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
{0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
{1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};
__constant int numVertsTable[256] = {
    0,    3,    3,    6,    3,    6,    6,    9,    3,    6,    6,    9,    6,    9,    9,    6,
    3,    6,    6,    9,    6,    9,    9,    12,   6,    9,    9,    12,   9,    12,   12,   9,
    3,    6,    6,    9,    6,    9,    9,    12,   6,    9,    9,    12,   9,    12,   12,   9,
    6,    9,    9,    6,    9,    12,   12,   9,    9,    12,   12,   9,    12,   15,   15,   6,
    3,    6,    6,    9,    6,    9,    9,    12,   6,    9,    9,    12,   9,    12,   12,   9,
    6,    9,    9,    12,   9,    12,   12,   15,   9,    12,   12,   15,   12,   15,   15,   12,
    6,    9,    9,    12,   9,    12,   6,    9,    9,    12,   12,   15,   12,   15,   9,    6,
    9,    12,   12,   9,    12,   15,   9,    6,    12,   15,   15,   12,   15,   6,    12,   3,
    3,    6,    6,    9,    6,    9,    9,    12,   6,    9,    9,    12,   9,    12,   12,   9,
    6,    9,    9,    12,   9,    12,   12,   15,   9,    6,    12,   9,    12,   9,    15,   6,
    6,    9,    9,    12,   9,    12,   12,   15,   9,    12,   12,   15,   12,   15,   15,   12,
    9,    12,   12,   9,    12,   15,   15,   12,   12,   9,    15,   6,    15,   12,   6,    3,
    6,    9,    9,    12,   9,    12,   12,   15,   9,    12,   12,   15,   6,    9,    9,    6,
    9,    12,   12,   15,   12,   15,   15,   6,    12,   9,    15,   12,   9,    6,    12,   3,
    9,    12,   12,   15,   12,   15,   9,    12,   12,   15,   15,   6,    9,    12,   6,    3,
    6,    9,    9,    6,    9,    12,   6,    3,    9,    6,    12,   3,    6,    3,    3,    0,
};
__constant int edgeInfo[24] = {

    0,1,
    1,2,
    2,3,
    3,0,
    4,5,
    5,6,
    6,7,
    7,4,
    0,4,
    1,5,
    2,6,
    3,7,

};
__constant float weight0 = 0.98f;
__constant float weight1 = 0.02f;

// classify voxel based on number of vertices it will generate
// one thread per voxel
__kernel
void
classifyVoxel(__global uint* voxelVerts, __global uint *voxelOccupied, __global uchar *volume,
              uint chunkSizeReal, uint4 chunkSizeShiftPlus, uint4 volumeChunkShiftPlus, uint4 volumeChunkMask,		//(5,10,15),(2,3,4),(2-1,1-1,1-1) if (7,6,6)
              float isoValue )
{
    // use 1 dim group(group[0] to sore chunk_id) to avoid wasting threads on null chunk
    // use group[1,2] to represent y,z of a chunk in order to avoid work_group_size exceeding 1024(CL_MAX_WORK_GROUP_SIZE)
    uint groupId = get_group_id(0);
    int4 localId = (int4)(	get_local_id(0),
    						get_global_id(1),
							get_global_id(2),
							0);
    int4 voxelOfs = (int4)(	((groupId)&volumeChunkMask.x),
							((groupId>>volumeChunkShiftPlus.x)&volumeChunkMask.y),
							((groupId>>volumeChunkShiftPlus.y)&volumeChunkMask.z),
							0);
    int4 voxelPos = (int4)(chunkSizeReal*voxelOfs.x+localId.x+1, 
							chunkSizeReal*voxelOfs.y+localId.y+1, 
							chunkSizeReal*voxelOfs.z+localId.z+1, 
							0);	//voxelOfs*35+ofs
							
    int rowPitch = chunkSizeReal<<volumeChunkShiftPlus.x;
    int slicePitch = (chunkSizeReal*chunkSizeReal)<<volumeChunkShiftPlus.y;
    int offset = voxelPos.z*slicePitch+voxelPos.y*rowPitch+voxelPos.x;
    // read field values at neighbouring grid vertices
    uchar8 field;
    	field.s0 = volume[offset];
    	field.s1 = volume[offset+1];
    	field.s2 = volume[offset+1+rowPitch];
    	field.s3 = volume[offset+rowPitch];
    	field.s4 = volume[offset+slicePitch];
    	field.s5 = volume[offset+1+slicePitch];
    	field.s6 = volume[offset+1+rowPitch+slicePitch];
    	field.s7 = volume[offset+rowPitch+slicePitch];
    	
    // calculate flag indicating if each vertex is inside or outside isosurface
    int cubeindex;
    	cubeindex =  (field.s0 < isoValue); 
    	cubeindex += (field.s1 < isoValue)*2; 
    	cubeindex += (field.s2 < isoValue)*4; 
    	cubeindex += (field.s3 < isoValue)*8; 
    	cubeindex += (field.s4 < isoValue)*16; 
    	cubeindex += (field.s5 < isoValue)*32; 
    	cubeindex += (field.s6 < isoValue)*64; 
    	cubeindex += (field.s7 < isoValue)*128;

    // read number of vertices from texture
    uint numVerts = numVertsTable[cubeindex];

    uint i = (groupId<<chunkSizeShiftPlus.z) + (localId.z<<chunkSizeShiftPlus.y) + (localId.y<<chunkSizeShiftPlus.x) + localId.x;
    voxelVerts[i] = numVerts;
    voxelOccupied[i] = (numVerts > 0);
}
     
// compact voxel array
__kernel
void
compactVoxels(__global uint *compactedVoxelArray, __global uint *voxelOccupied, __global uint *voxelOccupiedScan, uint4 chunkSizeShiftPlus)
{
    uint i = (get_group_id(0)<<chunkSizeShiftPlus.z) + (get_global_id(2)<<chunkSizeShiftPlus.y) + (get_global_id(1)<<chunkSizeShiftPlus.x) + get_local_id(0);

    if (voxelOccupied[i]) {
        compactedVoxelArray[ voxelOccupiedScan[i] ] = i;
    }
}

// compute interpolated vertex along an edge
float4 vertexInterp(float isolevel, float4 p0, float4 p1, float f0, float f1)
{
    float t = (isolevel - f0) / (f1 - f0);
    return mix(p0, p1, t);
} 

// calculate triangle normal
float4 calcNormal(float4 v0, float4 v1, float4 v2)
{
    float4 edge0 = v1 - v0;
    float4 edge1 = v2 - v0;
    // note - it's faster to perform normalization in vertex shader rather than here
    return cross(edge0, edge1);
}

// version that calculates flat surface normal for each triangle -- out an array of float
__kernel
void
generateTriangles2_vec3(__global float *pos, __global float *norm01, __global float *norm2t, __global uint *compactedVoxelArray, __global uint *numVertsScanned, __global uchar *volume,
                   		uint chunkSizeReal, uint chunkSizeMask, uint4 chunkSizeShiftPlus, uint4 volumeChunkShiftPlus, uint4 volumeChunkMask,
			        				float isoValue, uint activeVoxels, uint maxVerts )
{
    uint i = get_global_id(0) + get_global_id(1)*get_global_size(0);
    uint tid = get_local_id(0);

    if (i >= activeVoxels) {
        i = activeVoxels - 1;
    }
    uint voxelId = compactedVoxelArray[i];
    uint groupId = voxelId>>chunkSizeShiftPlus.z;
    int4 localId = (int4)(	(voxelId)&chunkSizeMask,
							(voxelId>>chunkSizeShiftPlus.x)&chunkSizeMask,
							(voxelId>>chunkSizeShiftPlus.y)&chunkSizeMask,
							0);
    int4 voxelOfs = (int4)( ((groupId)&volumeChunkMask.x),
							((groupId>>volumeChunkShiftPlus.x)&volumeChunkMask.y),
							((groupId>>volumeChunkShiftPlus.y)&volumeChunkMask.z),
							0);
    int4 voxelPos = (int4)(chunkSizeReal*voxelOfs.x+localId.x+1, 
							chunkSizeReal*voxelOfs.y+localId.y+1, 
							chunkSizeReal*voxelOfs.z+localId.z+1, 
							0);	//voxelOfs*35+ofs
 
    float4 p; // original ver has an offset of(-1,-1,-1)
    p.x = localId.x;
    p.y = localId.y;
    p.z = localId.z;
    p.w = 1.0f;

    // calculate cell vertex positions
    float4 v[8];
    v[0] = p;
    v[1] = p + (float4)(1, 0, 0,0);
    v[2] = p + (float4)(1, 1, 0,0);
    v[3] = p + (float4)(0, 1, 0,0);
    v[4] = p + (float4)(0, 0, 1,0);
    v[5] = p + (float4)(1, 0, 1,0);
    v[6] = p + (float4)(1, 1, 1,0);
    v[7] = p + (float4)(0, 1, 1,0);
    
    //0, 1, 5, 4, 3, 2, 6, 7
    
    int rowPitch = chunkSizeReal<<volumeChunkShiftPlus.x;
    int slicePitch = (chunkSizeReal*chunkSizeReal)<<volumeChunkShiftPlus.y;
    int offset = voxelPos.z*slicePitch+voxelPos.y*rowPitch+voxelPos.x;
    int voxelType[8];	// this version voxel type is fake,  not correct
    	voxelType[0] = 1;
    	voxelType[1] = 1;
    	voxelType[2] = 1;
    	voxelType[3] = 1;
    	voxelType[4] = 1;
    	voxelType[5] = 1;
    	voxelType[6] = 1;
    	voxelType[7] = 1;
 
    uchar8 field[4];
    	field[0].s0 = volume[offset];
    	field[0].s1 = volume[offset+1];
    	field[0].s2 = volume[offset+1+rowPitch];
    	field[0].s3 = volume[offset+rowPitch];
    	field[0].s4 = volume[offset+slicePitch];
    	field[0].s5 = volume[offset+1+slicePitch];
    	field[0].s6 = volume[offset+1+rowPitch+slicePitch];
    	field[0].s7 = volume[offset+rowPitch+slicePitch];
    	
    	field[1].s0 = volume[offset-1];
    	field[1].s1 = volume[offset-1+rowPitch];
    	field[1].s2 = volume[offset-1+slicePitch];
    	field[1].s3 = volume[offset-rowPitch];
    	field[1].s4 = volume[offset+1-rowPitch];
    	field[1].s5 = volume[offset-rowPitch+slicePitch];
    	field[1].s6 = volume[offset-slicePitch];
    	field[1].s7 = volume[offset+1-slicePitch];
    	field[2].s0 = volume[offset+rowPitch-slicePitch];
    	field[2].s1 = volume[offset-1+rowPitch+slicePitch];
    	field[2].s2 = volume[offset+1-rowPitch+slicePitch];
    	field[2].s3 = volume[offset+1+rowPitch-slicePitch]; 
    	
    	field[2].s4 = volume[offset+2];
    	field[2].s5 = volume[offset+2+rowPitch];
    	field[2].s6 = volume[offset+2*rowPitch];
    	field[2].s7 = volume[offset+2*slicePitch];
    	field[3].s0 = volume[offset+2+slicePitch];
    	field[3].s1 = volume[offset+2+rowPitch+slicePitch];
    	field[3].s2 = volume[offset+2*rowPitch+slicePitch];
    	field[3].s3 = volume[offset+1+2*rowPitch];
    	field[3].s4 = volume[offset+1+2*slicePitch];
    	field[3].s5 = volume[offset+1+2*rowPitch+slicePitch];
    	field[3].s6 = volume[offset+1+rowPitch+2*slicePitch];
    	field[3].s7 = volume[offset+rowPitch+2*slicePitch];

    // recalculate flag
    int cubeindex;
		cubeindex =  (field[0].s0 < isoValue); 
		cubeindex += (field[0].s1 < isoValue)*2; 
		cubeindex += (field[0].s2 < isoValue)*4; 
		cubeindex += (field[0].s3 < isoValue)*8; 
		cubeindex += (field[0].s4 < isoValue)*16; 
		cubeindex += (field[0].s5 < isoValue)*32; 
		cubeindex += (field[0].s6 < isoValue)*64; 
		cubeindex += (field[0].s7 < isoValue)*128;
                           
		// find the vertices where the surface intersects the cube 
		// Save share memory and keep size of shared memory used less than 0x4000(threshold of GTX240)
		__local float4 vertlist[12*NTHREADS];
		__local float4 normlist[12*NTHREADS];
		
		vertlist[tid] = vertexInterp(isoValue, v[0], v[1], field[0].s0, field[0].s1);
		vertlist[NTHREADS+tid] = vertexInterp(isoValue, v[1], v[2], field[0].s1, field[0].s2);
		vertlist[(NTHREADS*2)+tid] = vertexInterp(isoValue, v[2], v[3], field[0].s2, field[0].s3);
		vertlist[(NTHREADS*3)+tid] = vertexInterp(isoValue, v[3], v[0], field[0].s3, field[0].s0);
		vertlist[(NTHREADS*4)+tid] = vertexInterp(isoValue, v[4], v[5], field[0].s4, field[0].s5);
		vertlist[(NTHREADS*5)+tid] = vertexInterp(isoValue, v[5], v[6], field[0].s5, field[0].s6);
		vertlist[(NTHREADS*6)+tid] = vertexInterp(isoValue, v[6], v[7], field[0].s6, field[0].s7);
		vertlist[(NTHREADS*7)+tid] = vertexInterp(isoValue, v[7], v[4], field[0].s7, field[0].s4);
		vertlist[(NTHREADS*8)+tid] = vertexInterp(isoValue, v[0], v[4], field[0].s0, field[0].s4);
		vertlist[(NTHREADS*9)+tid] = vertexInterp(isoValue, v[1], v[5], field[0].s1, field[0].s5);
		vertlist[(NTHREADS*10)+tid] = vertexInterp(isoValue, v[2], v[6], field[0].s2, field[0].s6);
		vertlist[(NTHREADS*11)+tid] = vertexInterp(isoValue, v[3], v[7], field[0].s3, field[0].s7);
		
		// ofs is same as field[0-7]
	  float4 n[8];
	    n[0] = (float4)(	(field[1].s0*weight0+field[0].s0*weight1) - field[0].s1,			(field[1].s3*weight0+field[0].s0*weight1) - field[0].s3,			(field[1].s6*weight0+field[0].s0*weight1) - field[0].s4,			0	);
	    n[1] = (float4)(	field[0].s0 - (field[2].s4*weight0+field[0].s1*weight1),			(field[1].s4*weight0+field[0].s1*weight1) - field[0].s2,			(field[1].s7*weight0+field[0].s1*weight1) - field[0].s5,			0	);
	    n[3] = (float4)(	(field[1].s1*weight0+field[0].s3*weight1) - field[0].s2,			field[0].s0 - (field[2].s6*weight0+field[0].s3*weight1),			(field[2].s0*weight0+field[0].s3*weight1) - field[0].s7,			0	);
	    n[4] = (float4)(	(field[1].s2*weight0+field[0].s4*weight1) - field[0].s5,			(field[1].s5*weight0+field[0].s4*weight1) - field[0].s7,			field[0].s0 - (field[2].s7*weight0+field[0].s4*weight1),			0	);
	    n[2] = (float4)(	field[0].s3 - (field[2].s5*weight0+field[0].s2*weight1),			field[0].s1 - (field[3].s3*weight0+field[0].s2*weight1),			(field[2].s3*weight0+field[0].s2*weight1) - field[0].s6,			0	);
	    n[5] = (float4)(	field[0].s4 - (field[3].s0*weight0+field[0].s5*weight1),			(field[2].s2*weight0+field[0].s5*weight1) - field[0].s6,			field[0].s1 - (field[3].s4*weight0+field[0].s5*weight1),			0	);
	    n[6] = (float4)(	field[0].s7 - (field[3].s1*weight0+field[0].s6*weight1),			field[0].s5 - (field[3].s5*weight0+field[0].s6*weight1),			field[0].s2 - (field[3].s6*weight0+field[0].s6*weight1),			0	);
	    n[7] = (float4)(	(field[2].s1*weight0+field[0].s7*weight1) - field[0].s6,			field[0].s4 - (field[3].s2*weight0+field[0].s7*weight1),			field[0].s3 - (field[3].s7*weight0+field[0].s7*weight1),			0	);
		normlist[tid] = vertexInterp(isoValue, n[0], n[1], field[0].s0, field[0].s1);
		normlist[NTHREADS+tid] = vertexInterp(isoValue, n[1], n[2], field[0].s1, field[0].s2);
		normlist[(NTHREADS*2)+tid] = vertexInterp(isoValue, n[2], n[3], field[0].s2, field[0].s3);
		normlist[(NTHREADS*3)+tid] = vertexInterp(isoValue, n[3], n[0], field[0].s3, field[0].s0);
		normlist[(NTHREADS*4)+tid] = vertexInterp(isoValue, n[4], n[5], field[0].s4, field[0].s5);
		normlist[(NTHREADS*5)+tid] = vertexInterp(isoValue, n[5], n[6], field[0].s5, field[0].s6);
		normlist[(NTHREADS*6)+tid] = vertexInterp(isoValue, n[6], n[7], field[0].s6, field[0].s7);
		normlist[(NTHREADS*7)+tid] = vertexInterp(isoValue, n[7], n[4], field[0].s7, field[0].s4);
		normlist[(NTHREADS*8)+tid] = vertexInterp(isoValue, n[0], n[4], field[0].s0, field[0].s4);
		normlist[(NTHREADS*9)+tid] = vertexInterp(isoValue, n[1], n[5], field[0].s1, field[0].s5);
		normlist[(NTHREADS*10)+tid] = vertexInterp(isoValue, n[2], n[6], field[0].s2, field[0].s6);
		normlist[(NTHREADS*11)+tid] = vertexInterp(isoValue, n[3], n[7], field[0].s3, field[0].s7);
		barrier(CLK_LOCAL_MEM_FENCE);                               

    // output triangle vertices
    uint numVerts = numVertsTable[cubeindex];

    for(int i=0; i<numVerts; i+=3) {
        uint index = numVertsScanned[voxelId] + i;

        float4 v[3];
        float4 n[3];
        uint matIdx[3];
        uint edge;
        edge = triTable[cubeindex][i];
        v[0] = vertlist[(edge*NTHREADS)+tid];
        n[0] = normlist[(edge*NTHREADS)+tid];
        
        int one = edgeInfo[triTable[cubeindex][i] * 2];
        int two = edgeInfo[triTable[cubeindex][i] * 2 + 1];
        matIdx[0] = voxelType[((cubeindex & (1 << one)) == 0)? one:two];

        edge = triTable[cubeindex][i+1];
        v[1] = vertlist[(edge*NTHREADS)+tid];
        n[1] = normlist[(edge*NTHREADS)+tid];
        
        one = edgeInfo[triTable[cubeindex][i + 1] * 2];
        two = edgeInfo[triTable[cubeindex][i + 1] * 2 + 1];
        matIdx[1] = voxelType[((cubeindex & (1 << one)) == 0)? one:two];

        edge = triTable[cubeindex][i+2];
        v[2] = vertlist[(edge*NTHREADS)+tid];
        n[2] = normlist[(edge*NTHREADS)+tid];
        
        one = edgeInfo[triTable[cubeindex][i + 2] * 2];
        two = edgeInfo[triTable[cubeindex][i + 2] * 2 + 1];
        matIdx[2] = voxelType[((cubeindex & (1 << one)) == 0)? one:two];

        // calculate triangle surface normal
        //n[0] = n[1] = n[2] = calcNormal(v[0], v[1], v[2]);

        //if (index < (maxVerts-2)) // 0, 1, 2
        {
        	uint f3idx = index*3;
        	uint f2idx = index*2; 
        	uint mat0  = matIdx[0]*4 + 2; 
        	uint mat12 = matIdx[1]*256 + matIdx[2];
        	//n[i].z will be sum up with mat0, so it should be in range(0,1);vert do not need be in (0,1) because it will be normalized
        	n[0] /= 256;        	n[1] /= 256;        	n[2] /= 256;	
        	
            pos[f3idx] = v[0].x;	pos[f3idx+1] = v[0].y;	pos[f3idx+2] = v[0].z;
            norm01[f2idx] = n[0].x;		norm01[f2idx+1] = n[0].y;
            norm2t[f2idx] = mat0+n[0].z;	norm2t[f2idx+1] = mat12+0.0f;//materialIndices[0];

            pos[f3idx+3] = v[1].x;	pos[f3idx+4] = v[1].y;	pos[f3idx+5] = v[1].z;
            norm01[f2idx+2] = n[1].x;	norm01[f2idx+3] = n[1].y;
            norm2t[f2idx+2] = mat0+n[1].z;	norm2t[f2idx+3] = mat12+0.1f;//materialIndices[1];
            
            pos[f3idx+6] = v[2].x;	pos[f3idx+7] = v[2].y;	pos[f3idx+8] = v[2].z;
            norm01[f2idx+4] = n[2].x;	norm01[f2idx+5] = n[2].y;
            norm2t[f2idx+4] = mat0+n[2].z;	norm2t[f2idx+5] = mat12+0.2f;//materialIndices[2];
        }
    }
}
